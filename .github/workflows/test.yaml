name: Test

on:
  - pull_request
  - push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: list github images
        run: |
          docker images --format '{{.Repository}}:{{.Tag}}'

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache images
        uses: actions/cache@v2
        with:
          key: images
          path: .github/kind/images

      - name: Ensure cache dir exists
        run: |
          mkdir -p .github/kind/images

      - name: Load docker images
        run: |
          find .github/kind/images -name *.tar -exec docker load -i {} \;

      - name: Setup Kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          name: aw-showcase
          config: .github/kind/cluster.yaml
          version: v0.11.1

      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: 3.7.1

      - name: Setup Skaffold
        uses: volesen/setup-skaffold@v1.1
        with:
          version: v1.35.0

      - name: Load cluster apps images
        # TODO remove filtering out of hardcoded external images
        run: |
          for i in $(docker images --format '{{.Repository}}:{{.Tag}}' | grep -v 'node:' | grep -v 'buildpack-deps:') ; do
            kind load docker-image --name=aw-showcase "${i}"
          done

      - name: Deploy apps
        run: |
          make apply

      - name: Verify workflow
        run: |
          RETRIES=0
          until [ $RETRIES -eq 10 ]; do
            kubectl get pods --all-namespaces
            sleep 10
          done

      - name: Export images
        run: |
          IMAGES=$(docker exec aw-showcase-control-plane crictl images -o json | jq -r '.[] | .[] | .repoTags | .[]')
          IMAGES="${IMAGES} kindest/node:v1.21.1"
          for image in ${IMAGES}; do
            file_name=".github/kind/images/$(echo "${image}" | sed "s/\///g").tar"
            if [ -f "${file_name}" ]; then
              echo "found a saved ${image} image file: ${file_name}"
              continue
            fi
            echo "saving ${image} to ${file_name}"
            docker pull "${image}"
            docker save "${image}" -o "${file_name}"
          done
